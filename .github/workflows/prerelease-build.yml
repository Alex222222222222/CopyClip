# build the app for pre-release

name: Pre-release Build

on:
  workflow_dispatch:
  pull_request:
    types:
      - closed
    paths-ignore:
      - "package.json"
      - "package-lock.json"
      - "yarn.lock"
      - "pnpm-lock.yaml"
      - "README.md"
      - ".devcontainer/**"
      - ".github/**"
      - "docs/**"
      - "CODE_OF_CONDUCT.md"

jobs:
  build:
    name: build for pre-release
    if: github.event.pull_request.merged == true
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt install -y libdbus-1-dev libwebkit2gtk-4.0-dev
          sudo apt install -y build-essential curl wget libssl-dev libgtk-3-dev
          sudo apt install -y libayatana-appindicator3-dev librsvg2-dev xcb
          sudo apt install -y libxcb-randr0-dev libxcb-xtest0-dev
          sudo apt install -y libxcb-xinerama0-dev libxcb-shape0-dev
          sudo apt install -y libxcb-xkb-dev libxcb-xfixes0-dev

      - name: set up rust cache for macos and ubuntu
        if : matrix.os != 'windows-latest'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            src-tauri/target
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: set up rust cache for windows
        if : matrix.os == 'windows-latest'
        uses: actions/cache@v3
        with:
          path: |
            target\
            src-tauri\target
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: set up npm cache for macos and ubuntu
        uses: actions/cache@v3
        if : matrix.os != 'windows-latest'
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ matrix.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      - name: set up npm cache for windows
        uses: actions/cache@v3
        if : matrix.os == 'windows-latest'
        with:
          path: |
            %AppData%\npm-cache
            node_modules
          key: ${{ matrix.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      - name: Install nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Set up tailwindcss
        run: |
          npm install -D tailwindcss
          npx tailwindcss --help

      - name: Install minimal stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy

      - name: Test rust installation
        run: |
          cargo --version
          rustc --version

      - name: Install tauri-cli
        continue-on-error: true
        run: |
            cargo install tauri-cli

      - name: Install trunk
        continue-on-error: true
        run: |
            cargo install trunk
      
      - name: Verify tauri-cli, trunk installation
        run: |
          cargo tauri --version
          trunk --version
      
      - name: Install wasm-opt for ubuntu and macos
        if: matrix.os != 'windows-latest'
        continue-on-error: true
        run: |
            cargo install wasm-opt
      
      - name: Verify wasm-opt installation for ubuntu and macos
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          wasm-opt --version

      - name: rustup target add wasm32-unknown-unknown
        run: rustup target add wasm32-unknown-unknown

      - name: Create empty 'dist' directory
        continue-on-error: true
        run: mkdir dist

      - name: Build the app
        run: |
          cargo tauri build

      - if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-prerelease
          path: target/release/bundle/dmg

      - if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-prerelease
          path: target/release/bundle/deb/
      
      - if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-prerelease
          path: target\release\bundle\msi\
